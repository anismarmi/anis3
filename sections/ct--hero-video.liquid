{%- style -%}
  .ct-hero__text-wrap.mobile{
	display:none;
    background-color: #282233;
  }
  .ct-hero__text-wrap.mobile h2.h1.hero__title{
	color:white;
	font-size: calc(var(--typeHeaderSize)*0.62)
  }
  .ct-hero__text-wrap.mobile .hero__subtitle {
    color:white;
    font-size: calc(var(--typeBaseSize)*0.92);
  }
  .hero--{{ section.id }} .hero__title {
    font-size: 35px;
  }

  {%- assign button_alpha = section.settings.color_accent | color_extract: 'alpha' -%}
  {% unless button_alpha == 0.0 %}
    .hero--{{ section.id }} .btn {
      background: {{ section.settings.color_accent }} !important;
      border-color: {{ section.settings.color_accent }} !important;

      {%- assign accent_brightness = section.settings.color_accent | color_extract: 'lightness' -%}

      {% if accent_brightness > 40 %}
        color: #000 !important;
      {% endif %}
    }

    {% if settings.button_style == 'angled' %}
      .hero--{{ section.id }} .btn:before,
      .hero--{{ section.id }} .btn:after {
        background: {{ section.settings.color_accent }} !important;
        border-color: {{ section.settings.color_accent }} !important;
      }
    {% endif %}
  {% endunless %}

  {% if section.settings.overlay_opacity > 0 %}
    .hero--{{ section.id }} .hero__text-wrap:after {
      content: '';
      position: absolute;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
      z-index: 3;
      background-color: #000;
      opacity: {{ section.settings.overlay_opacity | divided_by: 100.0 }};
    }
  {% endif %}
  .hero__text-content.horizontal-right .animation-contents {
	font-size: .9em;
    max-width: 450px;
    text-align: left;
  }
  .hero__text-content.horizontal-right h2.h1.hero__title {
    text-align: left;
  }
  @media only screen and (min-width: 10px) and (max-width: 799px){
    .ct-hero__text-wrap.mobile{
	  display:block;
    }
    .hero--{{ section.id }} .hero__title {
      font-size: 25px;
    }
	div.hero__text-wrap{
	  display:none !important;
	}
  }
{%- endstyle -%}
<script>
  window.onload = waitForFrameUpdateHeight{{ section.settings.onload_function_postfix }}();
  window.addEventListener('resize', findFrameUpdateHeight{{ section.settings.onload_function_postfix }});
  
  function waitForFrameUpdateHeight{{ section.settings.onload_function_postfix }}(){ 
    var video_frame = document.querySelector('.hero--{{ section.id }} .video-div iframe');
    if(video_frame === null) {
      //console.log('null video frame');
      window.setTimeout(waitForFrameUpdateHeight{{ section.settings.onload_function_postfix }}, 250); /* this checks for video frame every 250 milliseconds*/
    } else {
      //console.log('found video frame');
      updateHeight{{ section.settings.onload_function_postfix }}(video_frame);
    }
  }
  
  function findFrameUpdateHeight{{ section.settings.onload_function_postfix }}(){
    var video_frame = document.querySelector('.hero--{{ section.id }} .video-div iframe');
    updateHeight{{ section.settings.onload_function_postfix }}(video_frame);
  }
  function updateHeight{{ section.settings.onload_function_postfix }}(video_frame){
    if(video_frame == null){
      //console.log("no video frame");
      var video_hero_section = document.querySelector('.hero--{{ section.id }}');
      var width = video_hero_section.getBoundingClientRect().width;
      let new_height = width / 2.044;
      video_hero_section.style.height = new_height+"px";
    } else {
      //console.log("video frame");
      //calculate the height ratio
      var video_player_width = video_frame.getAttribute("width");
      var video_player_height = video_frame.getAttribute("height");
      var video_player_ratio = (video_player_width/video_player_height);
      var video_hero_section = document.querySelector('.hero--{{ section.id }}');
      var width = video_hero_section.getBoundingClientRect().width;
      let new_height = width / video_player_ratio;
      video_hero_section.style.height = new_height+"px";
    }
  }
  
</script>

<div
  data-section-id="{{ section.id }}"
  data-section-type="video-section"
  class="video-parent-section hero hero--{{ section.id }}"
  data-mobile-natural="false"
  data-aos="hero__animation">

  <div class="hero__media hero__media--{{ section.id }}">
    <div class="hero__media-container">

      {%- if section.settings.video_url contains 'youtube.com/watch' -%}
        {%- assign video_id = section.settings.video_url | split: 'v=' -%}
        {%- assign video_id = video_id[1] | split: '&' | first -%}
        <div
          id="YouTubeVideo-{{ section.id }}"
          class="video-div"
          data-type="youtube"
          data-video-id="{{ video_id }}"></div>
      {%- endif -%}

      {%- if section.settings.video_url contains 'youtu.be/' -%}
        {%- assign video_id = section.settings.video_url | split: '.be/' -%}
        {%- assign video_id = video_id[1] | split: '&' | first -%}
        <div
          id="YouTubeVideo-{{ section.id }}"
          class="video-div"
          data-type="youtube"
          data-video-id="{{ video_id }}"></div>
      {%- endif -%}

      {%- if section.settings.video_url contains 'vimeo.com' -%}
        {%- assign video_id = section.settings.video_url | split: '.com/' -%}
        {%- assign video_id = video_id[1] | split: '/' | first -%}
        <div
          id="Vimeo-{{ section.id }}"
          class="video-div"
          data-type="vimeo"
          data-video-id="{{ video_id }}"></div>
      {%- endif -%}

      {%- if section.settings.video_url contains '.mp4' or section.settings.video_url contains '.MP4' -%}
        <video
          id="Mp4Video-{{ section.id }}"
          class="video-div"
          data-type="mp4"
          src="{{ section.settings.video_url }}"
          loop muted playsinline autoplay></video>
      {%- endif -%}

    </div>
  </div>

  <div class="hero__text-wrap">
    <div class="page-width">
      <div class="hero__text-content {{ section.settings.text_align }}">
        <div class="hero__text-shadow">
          {% unless section.settings.ct_title == blank %}
          <h2 class="h1 hero__title">
            <div class="animation-cropper">
              <div class="animation-contents">
              {{ section.settings.ct_title }}
              </div>
            </div>              
          </h2>
          {% endunless %}
          {%- unless section.settings.ct_body == blank -%}
          <div class="hero__subtitle">
            <div class="animation-cropper">
              <div class="animation-contents">
              {{ section.settings.ct_body }}
              </div>
            </div>
          </div>
          {%- endunless -%}
        </div>
      </div>
    </div>
  </div>
</div>

<div class="ct-hero__text-wrap mobile">
  <div class="page-width">
    <div class="hero__text-content {{ section.settings.text_align }}">
      <div class="hero__text-shadow">
        {% unless section.settings.ct_title == blank %}
        <h2 class="h1 hero__title">
          <div class="animation-cropper">
            <div class="animation-contents">
              {{ section.settings.ct_title }}
            </div>
          </div>              
        </h2>
        {% endunless %}
        {%- unless section.settings.ct_body == blank -%}
        <div class="hero__subtitle">
          <div class="animation-cropper">
            <div class="animation-contents">
              {{ section.settings.ct_body }}
            </div>
          </div>
        </div>
        {%- endunless -%}
      </div>
    </div>
  </div>
</div>

{% schema %}
  {
    "name": "CT Video",
    "class": "index-section--ct-video-hero",
    "settings": [
      {
        "type": "select",
        "id": "text_align",
        "label": "Text alignment",
        "default": "vertical-center horizontal-center",
        "options": [
          {
            "value": "vertical-center horizontal-left",
            "label": "Center left"
          },
          {
            "value": "vertical-center horizontal-center",
            "label": "Center"
          },
          {
            "value": "vertical-center horizontal-right",
            "label": "Center right"
          },
          {
            "value": "vertical-bottom horizontal-left",
            "label": "Bottom left"
          },
          {
            "value": "vertical-bottom horizontal-center",
            "label": "Bottom center"
          },
          {
            "value": "vertical-bottom horizontal-right",
            "label": "Bottom right"
          }
        ]
      },
      {
        "type": "text",
        "id": "video_url",
        "label": "Background video link",
        "default": "https://www.youtube.com/watch?v=_9VUPq3SxOc",
        "info": "Supports YouTube, .MP4 and Vimeo. Not all features supported by Vimeo. [Learn more](https://archetypethemes.co/blogs/impulse/how-do-i-add-background-videos)"
      },
      {
        "type": "range",
        "id": "overlay_opacity",
        "label": "Text protection",
        "info": "Darkens your image to ensure your text is readable",
        "default": 0,
        "min": 0,
        "max": 100,
        "step": 2,
        "unit": "%"
      },
	  {
		"type": "header",
		"content": "Customization of this section"
	  },
	  {
		"type": "paragraph",
		"content": "CT Taylor removed the height option for this custom section since he wrote code to update the heigh automatically to match the video dimensions."
	  },
	  {
		"type": "number",
		"id": "onload_function_postfix", 
		"label": "Onload Function Postfix ID", 
		"info": "Important if you have more than one video on the page. please add a unique number to this video. This number should not be assigned to any other video.", 
		"default": 1
	  },
	  {
		"type": "text", 
		"id": "ct_title", 
		"label": "Video Title",
		"info": "Video title (optional) overlay on video"
	  },
	  {
		"type": "textarea",
		"id": "ct_body", 
		"label": "Body",
		"info": "Video body (optional) overlay on video"
	  }
    ],
    "presets": [{
      "name": "CT - Video hero"
    }]
  }
{% endschema %}
